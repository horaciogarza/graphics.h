#include <dos.h>
#include <graphics.h>
#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <string.h>
#define LEFT 40

#define BLUE 1
#define BLUEDR 2
#define BLUEBR 3
#define RED 4
#define REDDR 5
#define REDBR 6
#define GREEN 7
#define GREENDR 8
#define GREENBR 9
#define PURPLE 10
#define PURPLEDR 11
#define PURPLEBR 12
#define YELLOW 13
#define YELLOWDR 14
#define YELLOWBR 15
#define BLANK 0


//************************************************************************
//************************************************************************
//************************************************************************

class billa
{

private:
       int xmax;//getmaxx()...
       int ymax;//getmaxy()...
       int r,x,y;//raza left top....
       char s[10];

public:
       billa(int,int,int);        //constructorul clasei
       ~billa();                  //destructorul clasei
       void deseneaza();
       char* getLabel();
       void  setLabel(int);
	int  GetX();
	int  GetY();
       void  SetX(int);
       void  SetY(int);
       void operator=(billa&ob)
       {
       x=ob.x;
       y=ob.y;
       r=ob.r;
       strcpy(s,ob.s);
       }

};


//constructorul clasei-------------------------------------

billa::billa(int label,int a=100,int b=100)
{
itoa(label,s,10);
xmax=getmaxx();
ymax=getmaxy();
x=a;
y=b;
settextjustify(CENTER_TEXT,CENTER_TEXT);
r=40;
};


//destructorul clasei

billa::~billa()
{
closegraph();
}


//metode...........

void billa::deseneaza()
{
circle(x,y,r);
outtextxy(x,y,s);
}


char* billa::getLabel()
{
return s;
}


void billa::setLabel(int x)
{
char *string;
itoa(x,string,10);
strcpy(s,string);
}



int billa::GetX()
{
return x;
}



int billa::GetY()
{
return y;
}

void billa::SetX(int left)
{
x=left;
}


void billa::SetY(int top)
{
y=top;
}

//************************************************************************
//************************************************************************
//************************************************************************



//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//-----------PROTOTIPUL FUNCTIILOR--------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
billa *vec[100];
int GetNumber(int x,int y);
void interschimba(billa *a,billa *b,int n,int nr);
void intro(void);
void GetImages(void);
void InitPalette(void);
void Brick(int,int,int);
void pressAnyKey(void);
void introC(void);
void showlines(void);
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------


void far *bmpRedBrick;
void far *bmpBlueBrick;
void far *bmpYellowBrick;
void far *bmpPurpleBrick;
void far *bmpBlankBrick;
void far *bmpGreenBrick;

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

//functia principala..........

void main()
{
int Color;
char option;
int ch;
int factor;
int i,n;
int left,top,label;
int sortat;
int aux;
int j,k,min;
int m;
static int h[]={3,1};

billa *c,*x;

again:

int gDriver=DETECT,gm;
initgraph(&gDriver,&gm,"c:\\borlandc\\bgi");


//InitPalette();
GetImages();
cleardevice();

introC();

delay(20);

intro();

pressAnyKey();

cleardevice();

printf("(MAX=8) n-->");scanf("%d",&n);

if(n<=5) factor=140;

else
     if(n==6) factor=80;

	 else
	       if(n==7) factor=40;


		   else

			factor=0;

for(i=0;i<n;i++)
{
printf("label=");
scanf("%d",&label);
vec[i]=new billa(label,factor+LEFT,getmaxy()/2);
factor+=80;
}

char sir[100];
cleardevice();

for(i=0;i<n;i++) vec[i]->deseneaza();

getch();
setbkcolor(BROWN);

setcolor(WHITE);
outtextxy(300,90,"Alegeti metoda de sortare:");
outtextxy(300,100,"1-bubble sort");
outtextxy(328,110,"2-selection by minim");
outtextxy(296,120,"3-shell sort");


printf(">>");
scanf("%d",&ch);

if(ch==3)
{
setcolor(CYAN);
outtextxy(296,120,"3-shell sort");
}
else

if(ch==2)
{
setcolor(CYAN);
outtextxy(328,110,"2-selection by minim");
}
else
if(ch==1)
{
setcolor(CYAN);
outtextxy(300,100,"1-bubble sort");
}


setbkcolor(BLUE);

switch(ch)
{

//sortarea prin metoda bulelor


//######################################################################
//######################################################################
//######################################################################
//######################################################################
//######################################################################


case 1:

do
{
sortat=1;

for(i=0;i<n-1;i++)
{

if(atoi(vec[i]->getLabel())  >  atoi(vec[i+1]->getLabel()))
{
interschimba(vec[i],vec[i+1],GetNumber(i,i+1),n);
c=vec[i];
vec[i]=vec[i+1];
vec[i+1]=c;
sortat=0;

}//end if


}//end for

}while(!sortat);

break;

//######################################################################
//######################################################################
//######################################################################
//######################################################################
//######################################################################


//sortare prin selectarea minimului
case 2:

for(i=0;i<n-1;i++)
{
min=atoi(vec[i]->getLabel());
k=i;

for(j=i+1;j<n;j++)
{

if(atoi(vec[j]->getLabel()) < min)
{

min=atoi(vec[j]->getLabel());
k=j;

interschimba(vec[i],vec[k],GetNumber(i,k),n);

c=vec[i];
vec[i]=vec[k];
vec[k]=c;

}//end if


}

}
break;

//######################################################################
//######################################################################
//######################################################################
//######################################################################



//######################################################################
//######################################################################
//######################################################################
//######################################################################
//######################################################################

//sortare shell
case 3:

//h[]={3,1}
//9 8 1 2
//2 8 1 9
//2 1 8 9


//1 9 3 0
//0 9 3 1
//0 3 9 1
//0 1 3 9


for(m=0;m<2;m++)
{

k=h[m];//k=1

for(i=k;i<n;i++)//i=2;i=3
{
x=vec[i];

for(j=i-k;(j>=0) &&  (atoi(vec[j]->getLabel()) > atoi(x->getLabel())) ;j-=k)
{

interschimba(vec[j],vec[j+k],GetNumber(j,j+k),n);
c=vec[j+k];
vec[j+k]=vec[j];
vec[j]=c;
}//end for j

vec[j+k]=x;

} //end for i

}//end for m

break;

//######################################################################
//######################################################################
//######################################################################
//######################################################################
//######################################################################


}//end switch






setbkcolor(MAGENTA);

setcolor(LIGHTGREEN);
outtextxy(400,400,"continue?y/n");

if(getch()=='y') option='y';
	   else
		 option='n';


if(option=='y')
	       {
	       clrscr();
	       closegraph();
	       goto again;
	       }


else
{

cleardevice();
setbkcolor(BLUE);

	     Color=0;

	      while(!kbhit())
	      {
	       switch(Color++)
	       {

	       case 0: setcolor(Color);break;
	       case 1: setcolor(Color);break;
	       case 2: setcolor(Color);break;
	       case 3: setcolor(Color);break;
	       }

		settextstyle(4,0,5);
		outtextxy(300,getmaxy()/2,"Created by Adi Statescu...giba :)");

		delay(100);
		if(Color==3) Color=0;

	      }


setbkcolor(BLACK);
showlines();

}


getch();

closegraph();
}//end main()


//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------










//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************

void interschimba(billa *a,billa *b,int n,int nr)
{
int x1,y1,x2,y2;
int dx,dy;

int xsec1,ysec1,xsec2,ysec2;

xsec1=a->GetX();ysec1=a->GetY();
xsec2=b->GetX();ysec2=b->GetY();


const int ax=b->GetX();

x1=a->GetX();y1=a->GetY();
x2=b->GetX();y2=b->GetY();

dx=1;
dy=1;

do
{
setcolor(BLACK);
a->deseneaza();
b->deseneaza();

    x1+=dx;a->SetX(x1);//y1=dy;a->SetY(y1);

    x2-=dx;b->SetX(x2);//y2+=dy;b->SetY(y2);

setcolor(WHITE);
a->deseneaza();
b->deseneaza();


for(int i=nr-1;i>=0;i--)
{
if(!n&1)

vec[i]->deseneaza();

n=n>>1;
}

delay(40);

}while(x1!=ax);




}//end function interschimba()


//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************










//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************




int GetNumber(int x,int y)
{
int n1=1;
int n2=1;

if(x && y)
{
n1=n1<<x;
n2=n2<<y;

  return n1 | n2;
}
else

if(x==0 && y)
{
n2=n2<<y;
n1=1;
return n1 | n2;
}

else  if(y==0 && x)
       {
       n1=n1<<x;
       n2=1;

       return n1 | n2;
       }



/*
00000010
00001000
00001010
  */
}



void intro() {

int i,j;

int bricks[20][30]={
	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
	     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

	     };



for(i=0;i<20;i++)
{
for(j=0;j<30;j++)
{
if(!bricks[i][j]) continue;

   putimage(j*20,i*20,bmpRedBrick,0);


}
}


}

//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************


//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************
void InitPalette() {
	//Blue Colors
	setpalette(BLUE,1);  //Normal
	setpalette(BLUEDR,8);  //Dark
	setpalette(BLUEBR,9);  //Bright
	//Red Colors
	setpalette(RED,4);  //Normal
	setpalette(REDDR,32);  //Dark
	setpalette(REDBR,36);  //Bright
	//Green Colors
	setpalette(GREEN,2);  //Normal
	setpalette(GREENDR,16);  //Dark
	setpalette(GREENBR,18);  //Bright
	//Purple Colors
	setpalette(PURPLE,13);  //Normal
	setpalette(PURPLEDR,33);  //Dark
	setpalette(PURPLEBR,61);  //Bright
	//Yellow Colors
	setpalette(YELLOW,6);  //Normal
	setpalette(YELLOWDR,48);  //Dark
	setpalette(YELLOWBR,62);  //Bright
		   }

//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************



//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************

void Brick(int x,int y,int color)
{

switch(color)
{
case BLUE:
		setcolor(BLUE);
		setfillstyle(1,BLUEDR);
		setfillstyle(1,BLUEBR);
		setfillstyle(1,BLUE);
		bar(x, y, x+20, y+20);

		break;


case RED:
		setcolor(RED);
		setfillstyle(1,REDDR);
		setfillstyle(1,REDBR);
		setfillstyle(1,RED);
		bar(x, y, x+20, y+20);
		break;


case GREEN:
		setcolor(RED);
		setfillstyle(1,GREENDR);
		setfillstyle(1,GREENBR);
		setfillstyle(1,GREEN);
		bar(x, y, x+20, y+20);
		break;



case YELLOW:
		setcolor(YELLOW);
		setfillstyle(1,YELLOWDR);
		setfillstyle(1,YELLOWBR);
		setfillstyle(1,YELLOW);
		bar(x, y, x+20, y+20);
		break;

case PURPLE:
		setcolor(PURPLE);
		setfillstyle(1,PURPLEDR);
		setfillstyle(1,PURPLEBR);
		setfillstyle(1,PURPLE);
		bar(x, y, x+20, y+20);
		break;

}

}

//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************








//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************
void GetImages()
{

Brick(100,100,RED);
Brick(130,100,BLUE);
Brick(160,100,YELLOW);
Brick(190,100,PURPLE);
Brick(220,100,GREEN);


bmpRedBrick=malloc(imagesize(0,0,20,20));
bmpBlueBrick=malloc(imagesize(0,0,20,20));
bmpGreenBrick=malloc(imagesize(0,0,20,20));
bmpYellowBrick=malloc(imagesize(0,0,20,20));
bmpBlankBrick=malloc(imagesize(0,0,20,20));
bmpPurpleBrick=malloc(imagesize(0,0,20,20));

getimage(100,100,120,120,bmpRedBrick);
getimage(130,100,150,120,bmpBlueBrick);
getimage(160,100,180,120,bmpYellowBrick);
getimage(190,100,210,120,bmpPurpleBrick);
getimage(220,100,240,120,bmpGreenBrick);

}

//**********************************************************************
//**********************************************************************
//**********************************************************************
//**********************************************************************




//*********************************************************************
//*********************************************************************
//*********************************************************************
//*********************************************************************


void pressAnyKey()
{


		int Color=0;
		while(!kbhit())

		{
		   switch(Color++) {
		   case 0:
				setcolor(Color);
				break;
		   case 1:
				setcolor(Color);
				break;
		   case 2:
				setcolor(Color);
				break;
		   case 3:
				setcolor(Color);
				break;
				   }

		   outtextxy(300,400,"[ Press any key for continue...]");
		   delay(80);
		   if(Color>3)
			  Color=0;
		}


}



//**********************************************************************
//**********************************************************************
//**********************************************************************
//**********************************************************************









//**********************************************************************
//**********************************************************************
//**********************************************************************
//**********************************************************************


void introC()
{

for(int y=500;y>=0;y--)
{
setcolor(MAGENTA);
circle(getmaxx()/2,getmaxy()/2,y);
delay(10);
}

for(int t=0;t<=250;t++)
{
setcolor(BLACK);
circle(getmaxx()/2,getmaxy()/2,t);
delay(10);
}

}



//**********************************************************************
//**********************************************************************
//**********************************************************************
//**********************************************************************





//**********************************************************************
//**********************************************************************
//**********************************************************************
//**********************************************************************

void showlines()
{
int x1=0,y1=0,x2=0,y2=getmaxy();
int zx1=getmaxx(),zy1=getmaxy(),zx2=getmaxx(),zy2=0;

cleardevice();

for(int i=1;i<=70;i++)
{
setcolor(GREEN);
line(x1,y1,x2,y2);
x2+=8;
y1+=8;
setcolor(MAGENTA);
line(zx1,zy1,zx2,zy2);
zx2-=8;
zy1-=8;
delay(100);
}


settextstyle(1,0,4);
outtextxy(300,getmaxy()/2,"Thanks you for playing");

getch();
}//end function


//**********************************************************************
//**********************************************************************
//**********************************************************************
//**********************************************************************
